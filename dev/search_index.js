var documenterSearchIndex = {"docs":
[{"location":"manual/overview/#PhyNE.jl","page":"PhyNE.jl","title":"PhyNE.jl","text":"","category":"section"},{"location":"manual/overview/","page":"PhyNE.jl","title":"PhyNE.jl","text":"Manual TBA","category":"page"},{"location":"#PhyNE.jl","page":"PhyNE.jl","title":"PhyNE.jl","text":"","category":"section"},{"location":"","page":"PhyNE.jl","title":"PhyNE.jl","text":"Documentation for PhyNE.jl: Estimating Maximum Composite Likelihood Phylogenetic Network","category":"page"},{"location":"","page":"PhyNE.jl","title":"PhyNE.jl","text":"","category":"page"},{"location":"","page":"PhyNE.jl","title":"PhyNE.jl","text":"General info TBA","category":"page"},{"location":"#References","page":"PhyNE.jl","title":"References","text":"","category":"section"},{"location":"","page":"PhyNE.jl","title":"PhyNE.jl","text":"TBA","category":"page"},{"location":"#Manual","page":"PhyNE.jl","title":"Manual","text":"","category":"section"},{"location":"","page":"PhyNE.jl","title":"PhyNE.jl","text":"Pages = [\n    \"manual/overview.md\"\n    ]","category":"page"},{"location":"#Functions","page":"PhyNE.jl","title":"Functions","text":"","category":"section"},{"location":"","page":"PhyNE.jl","title":"PhyNE.jl","text":"    readPhylipFile!\n    readCheckPoint\n    writeSitePatternCounts\n    extractNQuartets\n    printQuarts\n    PhyNe!","category":"page"},{"location":"#PhyNE.readPhylipFile!","page":"PhyNE.jl","title":"PhyNE.readPhylipFile!","text":"readPhylipFile!(inputfile::AbstractString, writecsv::Bool)\nreadPhylipFile!(inputfile::AbstractString)\n\nTakes in, read, and parse the input phylip file. File name is specified as a string. If writecsv=true, list of  site pattern frequencies from the input phylip for all permutations of four taxa is saved as a .csv file in the  working directory. The writecsv boolean is false by default. The function will perform assuming writecsv=false  if not specified.\n\nInput\n\ninputfile Name of phylip file as a AbstractString\nwritecsv Boolean to write site pattern frequencies in CSV file\n\n\n\n\n\n\n","category":"function"},{"location":"#PhyNE.readCheckPoint","page":"PhyNE.jl","title":"PhyNE.readCheckPoint","text":"readCheckPoint(ckpfile::AbstractString)\n\nReads in .ckp file. gegeege\n\n\n\n\n\n","category":"function"},{"location":"#PhyNE.writeSitePatternCounts","page":"PhyNE.jl","title":"PhyNE.writeSitePatternCounts","text":"writeSitePatternCounts(p::Phylip,write::Bool,inputfile::AbstractString)\nwriteSitePatternCounts(p::Phylip,inputfile::AbstractString)\nwriteSitePatternCounts(inputfile::AbstractString)\nwriteSitePatternCounts(p::Phylip)\n\nWrites the observed site pattern frequencies from the phylip file as .csv file in the working  directory and name it as sitePatternCounts_inputfile.csv.  Although it requires an attribute inputfile, it does not actually read the file as long as the Phylip object in memory is provided. (i.e., any AbstractString can be provided here that  is used as a suffix of the ) However, if only the input file name is provided,  it runs readPhylipFile! first then write csv. file.\n\nInput\n\np A Type Phylip object\nwrite  Boolean variable to export site pattern frequences in .csv\ninputfile Name of phylip file as a AbstractString\n\n\n\n\n\n\n","category":"function"},{"location":"#PhyNE.extractNQuartets","page":"PhyNE.jl","title":"PhyNE.extractNQuartets","text":"extractNQuartets(net::HybridNetwork,p::Phylip)\n\ngege\n\n\n\n\n\n","category":"function"},{"location":"#PhyNE.printQuarts","page":"PhyNE.jl","title":"PhyNE.printQuarts","text":"printQuarts\n\ngegejaga\n\n\n\n\n\n","category":"function"},{"location":"#PhyNE.PhyNe!","page":"PhyNE.jl","title":"PhyNE.PhyNe!","text":"PhyNe!(startT::HybridNetwork,inputFile::Phylip,outgroup::String)\n\nEstimates the network or tree to fit observed site pattern frequencies stored in a Phylip object, using composite likelihood. A level-1 network is assumed. The search begins from topolgoy startT, which can be a tree or a network (with less than hmax reticulation nodes). Usually, startT is expected to be a tree estiamted from data, but can also be randomly generated. The topology is rooted using the outgroup provided. This must be identical to the outgroup sequence provided in the  sequence alignment. By default, PhyNe! will search the network space using simulated annealing assuming  hmax=1.\n\nThere are many optional arguments (values in parenthesis are defaults):\n\nhillclimbing(=false) Select hill climbing search\nhmax(=1) Maximum number of reticulations in the final network\nnruns(=10) Number of independent runs\nnniStartT=false \nmaxcount=1000 Number of steps to terminate the search\nnfail=75 Number of consecutive failures to terminate the search\n\nSimulated annealing stuff:\n\nburninn=25\nk=10\nProbabilityOfNotSelectingNode=9.5e-45\ncons=0.9\nalph=0.8\n\nOptimization stuff:\n\nNumIter=1000\nparamprint=false\n\nMiscellaneous:\n\ntimestamp=false\nfilename=\"\"\ndisplay=falses\n\n\n\n\n\n","category":"function"},{"location":"#Types","page":"PhyNE.jl","title":"Types","text":"","category":"section"},{"location":"","page":"PhyNE.jl","title":"PhyNE.jl","text":"    Phylip\n    nquartets\n    Nquartets","category":"page"},{"location":"#PhyNE.Phylip","page":"PhyNE.jl","title":"PhyNE.Phylip","text":"Phylip\n\nSubtype of abstract INPUT type. Sequence alignment with the following attributes:\n\nfilename    The actual filename of the input sequence alignment\n\ntime    Time it took to intake the filename in seconds\n\nnumtaxa The number of taxa appears on the first line of phylip\n\nseqleng The sequence length appears on the first line of phylip\n\nnametaxa    Names of each individual in the order of appearance in phylip\n\ncounttaxa   Numbering each individual in the order of appearance in phylip\n\nallquartet  All combinations of quartets using nametaxa\n\nindex   Just convert allquartet elements into arbitrary index numbers\n\nspcounts    Arrays of 15 site pattern frequencies \n\n\n\n\n\n","category":"type"},{"location":"#PhyNE.nquartets","page":"PhyNE.jl","title":"PhyNE.nquartets","text":"nquartets\n\nSubtype of abstract NQuartet type. Stores relevant information of a quartet extracted from a topology with the following attributes:\n\nnumber  List of individuals quartets in the order of i,j,k,l\n\ntquartet    List of quartets in the order of i,j,k,l\n\nindexNET    Index number for each quartet in the order appears in quartnet. \n\nmspcountsNET    We can directly use this counts for likelihood calculation.\n\nmrca    List of common ancesters of two taxa in the order of i and j (ij),ik,il,jk,jl,and kl\n\nntau    Unique number of the taus in the tau used in branchlengths\n\nbranchlength    Branch length from the mrca to tau=0 in the order of i and j (ij),ik,il,jk,jl,and kl\n\nmomestlength    Branch length identified for each quartet given the mspcounts using moment estimator - Will get filled later because theta is required\n\nmombl   Branch length that is averaged for the entire tree/network - Will get filled later because theta is required\n\nsymtype Type of each quartet. It can be either symmetric or asymmetric. Asymmetric (type 0) can have four possible topologies and we define type 1 as (i,((j,k),l)); type 2 as ((i,(j,k)),l); type 3 as (i,(j,(k,l))); and type 4 as (((i,j),k),l).\n\nlogLik  It's just a likelihood for the quartet\n\n\n\n\n\n","category":"type"},{"location":"#PhyNE.Nquartets","page":"PhyNE.jl","title":"PhyNE.Nquartets","text":"Nquartets\n\nSubtype of abstract NQuartet type. Stores relevant information of a tree extracted from a topology with the following attributes:\n\nleafname    Name of the leaves as appears on the newick\n\nleafnumber  Assigned number for each leaf when reading in the newick\n\ngamma   Gamma as appears on the newick, although irrelevant for our computation\n\nnquartet    An array of all quartets in the given topology\n\n\n\n\n\n","category":"type"},{"location":"#Index","page":"PhyNE.jl","title":"Index","text":"","category":"section"},{"location":"","page":"PhyNE.jl","title":"PhyNE.jl","text":"    readPhylipFile!\n    readCheckPoint\n    writeSitePatternCounts\n    extractNQuartets\n    printQuarts\n    Phylip\n    nquartets\n    Nquartets\n    PhyNe!","category":"page"}]
}
